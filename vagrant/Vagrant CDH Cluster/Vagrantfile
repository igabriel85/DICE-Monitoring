# DICE CDH Instance Vagrant development env deploy
# beta v0.2.1
# Bootstrap script for DICE CDH Development Cluster
#
#Copyright 2017, Institute e-Austria, Timisoara, Romania
#    http://www.ieat.ro/
#Developers:
# * Gabriel Iuhasz, iuhasz.gabriel@info.uvt.ro
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at:
#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$master_script = <<SCRIPT
#!/bin/bash
apt-get install curl -y
apt-get install screen -y
apt-get install wget -y
REPOCM=${REPOCM:-cm5}
CM_REPO_HOST=${CM_REPO_HOST:-archive.cloudera.com}
CM_MAJOR_VERSION=$(echo $REPOCM | sed -e 's/cm\\([0-9]\\).*/\\1/')
CM_VERSION=$(echo $REPOCM | sed -e 's/cm\\([0-9][0-9]*\\)/\\1/')
OS_CODENAME=$(lsb_release -sc)
OS_DISTID=$(lsb_release -si | tr '[A-Z]' '[a-z]')
if [ $CM_MAJOR_VERSION -ge 4 ]; then
  cat > /etc/apt/sources.list.d/cloudera-$REPOCM.list <<EOF
deb [arch=amd64] http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm $OS_CODENAME-$REPOCM contrib
deb-src http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm $OS_CODENAME-$REPOCM contrib
EOF
curl -s http://$CM_REPO_HOST/cm$CM_MAJOR_VERSION/$OS_DISTID/$OS_CODENAME/amd64/cm/archive.key > key
apt-key add key
rm key
fi
apt-get update
export DEBIAN_FRONTEND=noninteractive
apt-get -q -y --force-yes install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons
service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start
SCRIPT

$hosts_script = <<SCRIPT
apt-get install wget -y
apt-get install unzip -y

mkdir /opt/oryx && cd /opt/oryx
wget https://github.com/OryxProject/oryx/releases/download/oryx-2.0.0-beta-1/compute-classpath.sh
wget https://github.com/OryxProject/oryx/releases/download/oryx-2.0.0-beta-1/oryx-run.sh
chmod +x compute-classpath.sh 
chmod +x oryx-run.sh
#Currently set to alpha build 2

wget https://github.com/OryxProject/oryx/releases/download/oryx-2.0.0-beta-1/oryx-batch-2.0.0-beta-1.jar
wget https://github.com/OryxProject/oryx/releases/download/oryx-2.0.0-beta-1/oryx-serving-2.0.0-beta-1.jar
wget https://github.com/OryxProject/oryx/releases/download/oryx-2.0.0-beta-1/oryx-speed-2.0.0-beta-1.jar

#install logstash-forwarder
echo 'deb http://packages.elasticsearch.org/logstashforwarder/debian stable main' | sudo tee /etc/apt/sources.list.d/logstashforwarder.list

wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -

apt-get update
apt-get install logstash-forwarder

mkdir /opt/certs
mkdir /opt/private

#Copy example conf
wget https://github.com/OryxProject/oryx/blob/master/app/conf/als-example.conf
mv als-example.conf oryx.conf

#download example dataset
cd /opt/oryx
wget http://files.grouplens.org/datasets/movielens/ml-100k.zip
unzip ml-100k.zip
cd ml-100k
#change u.data to csv format
tr '\t' ',' < u.data > data.csv


#Install dmon-agent 
cd /opt
wget https://github.com/dice-project/DICE-Monitoring/releases/download/latest-agent/dmon-agent.tar.gz
tar xvf dmon-agent.tar.gz
cd /opt/dmon-agent/
pip install -r requirements.txt
bash dmon-agent.sh

#Set Swappiness value to 10 instead of 60
sysctl -w vm.swappiness=10
cat /proc/sys/vm/swappiness

cat > /etc/hosts <<EOF
127.0.0.1       localhost
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
SCRIPT

Vagrant.configure("2") do |config|

  # Define base image
  config.vm.box = "precise64"
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Manage /etc/hosts on host and VMs
  config.hostmanager.enabled = false
  config.hostmanager.manage_host = true
  config.hostmanager.include_offline = true
  config.hostmanager.ignore_private_ip = false

  #Set same Username and Password
  #config.ssh.username = "dice"
  #config.ssh.password = "diceh2020"
  
  #Path to Private SSH key location
  #config.ssh.private_key_path = "<path/to/key>"
  
  #SSH default host and port settings
  #config.ssh.host ="<host>"
  #config.ssh.port = "<port>"
  
  
  config.vm.define :master do |master|
    master.vm.provider :virtualbox do |v|
      v.name = "vmclusteroryx1"
      v.customize ["modifyvm", :id, "--memory", "4096"]
    end
    master.vm.network :private_network, ip: "10.211.55.100"
    master.vm.hostname = "vmclusteroryx1"
    master.vm.network :forwarded_port, host:7180, guest: 7180
    master.vm.network :forwarded_port, guest: 22, host: 2185
    master.vm.provision :shell, :inline => $hosts_script
    master.vm.provision :hostmanager
    master.vm.provision :shell, :inline => $master_script
  end

  config.vm.define :slave1 do |slave1|
    slave1.vm.box = "precise64"
    slave1.vm.provider :virtualbox do |v|
      v.name = "vmclusteroryx2"
      v.customize ["modifyvm", :id, "--memory", "4096"]
    end
    slave1.vm.network :private_network, ip: "10.211.55.101"
    slave1.vm.hostname = "vmclusteroryx2"
    slave1.vm.network :forwarded_port, guest: 22, host: 2186
    slave1.vm.provision :shell, :inline => $hosts_script
    slave1.vm.provision :hostmanager
  end

  config.vm.define :slave2 do |slave2|
    slave2.vm.box = "precise64"
    slave2.vm.provider :virtualbox do |v|
      v.name = "vmclusteroryx3"
      v.customize ["modifyvm", :id, "--memory", "4096"]
    end
    slave2.vm.network :private_network, ip: "10.211.55.102"
    slave2.vm.hostname = "vmclusteroryx3"
    slave2.vm.network :forwarded_port, guest: 22, host: 2187
    slave2.vm.provision :shell, :inline => $hosts_script
    slave2.vm.provision :hostmanager
  end

  config.vm.define :slave3 do |slave3|
    slave3.vm.box = "precise64"
    slave3.vm.provider :virtualbox do |v|
      v.name = "vmclusteroryx4"
      v.customize ["modifyvm", :id, "--memory", "4096"]
    end
    slave3.vm.network :private_network, ip: "10.211.55.103"
    slave3.vm.hostname = "vmclusteroryx4"
    slave3.vm.network :forwarded_port, guest: 22, host: 2188
    slave3.vm.provision :shell, :inline => $hosts_script
    slave3.vm.provision :hostmanager
  end

end
